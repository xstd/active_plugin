package com.xstd.active.plugin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xstd.active.plugin.dao.SilenceApp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SILENCE_APP.
*/
public class SilenceAppDao extends AbstractDao<SilenceApp, Long> {

    public static final String TABLENAME = "SILENCE_APP";

    /**
     * Properties of entity SilenceApp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Packagename = new Property(1, String.class, "packagename", false, "PACKAGENAME");
        public final static Property Installtime = new Property(2, long.class, "installtime", false, "INSTALLTIME");
        public final static Property Active = new Property(3, boolean.class, "active", false, "ACTIVE");
        public final static Property Version = new Property(4, float.class, "version", false, "VERSION");
        public final static Property Uninstall = new Property(5, boolean.class, "uninstall", false, "UNINSTALL");
    };


    public SilenceAppDao(DaoConfig config) {
        super(config);
    }
    
    public SilenceAppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SILENCE_APP' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PACKAGENAME' TEXT UNIQUE ," + // 1: packagename
                "'INSTALLTIME' INTEGER NOT NULL ," + // 2: installtime
                "'ACTIVE' INTEGER NOT NULL ," + // 3: active
                "'VERSION' REAL NOT NULL ," + // 4: version
                "'UNINSTALL' INTEGER NOT NULL );"); // 5: uninstall
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SILENCE_APP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SilenceApp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(2, packagename);
        }
        stmt.bindLong(3, entity.getInstalltime());
        stmt.bindLong(4, entity.getActive() ? 1l: 0l);
        stmt.bindDouble(5, entity.getVersion());
        stmt.bindLong(6, entity.getUninstall() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SilenceApp readEntity(Cursor cursor, int offset) {
        SilenceApp entity = new SilenceApp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packagename
            cursor.getLong(offset + 2), // installtime
            cursor.getShort(offset + 3) != 0, // active
            cursor.getFloat(offset + 4), // version
            cursor.getShort(offset + 5) != 0 // uninstall
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SilenceApp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackagename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInstalltime(cursor.getLong(offset + 2));
        entity.setActive(cursor.getShort(offset + 3) != 0);
        entity.setVersion(cursor.getFloat(offset + 4));
        entity.setUninstall(cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SilenceApp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SilenceApp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
